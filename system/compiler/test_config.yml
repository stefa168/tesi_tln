models:
  # Section that contains the different models that have to be trained/fine-tuned
  # Supports BERT, NER with Spacy, and others.
  - name: "global_subject_classifier"
    type: bert
    pretrained_model: "bert-base-uncased"
    dataset_path: "../../multitask_training/data_cleaned_manual_combined.csv"
    columns:
      examples_column: "Question"
      labels_column: "Global Subject"

    # idea: make a small pipeline that would allow to prepare the data and that at the end expects it to return a trained model of some sort.

  # We have to train a group of models that will be used to assign a second label to the data
  # This has to use the label_column "Question Intent", and the multiple models have to receive
  # data that has been split on the "Global Subject" column. like some sort of "map" function
  - name: question_intent
    type: bert
    pretrained_model: bert-base-uncased
    dataset: data_cleaned_manual_combined.csv
    steps:
      - name: split_data
        type: split_data
        column: "Global Subject"
      - type: map
        steps:
        - type: train_model
          model: bert
          resulting_model_name: "question_intent_{column}"
          columns:
            examples_column: "Question"
            labels_column: "Question Intent"

    # how it looks if it was written with lambdas:
    # steps: [
    #   split_data("Global Subject"),
    #   train_model("Question", "Question Intent")
    # ]
    # with split_data(dataset, column) -> { column_name: sub_dataset, ... }
    # and train_model(dataset, examples_column, labels_column) -> model
#    columns:
#      example_column: "Question"
#      label_column: "Question Intent"
#      # This is the column that will be used to split the data and that will produce the different models
#      map_split_on: "Global Subject"

  # Spacy NER model:
  - name: ner
    type: spacy_ner
    dataset: ner_labels.jsonl
    columns:
      example_column: "Question"
      label_column: "NER"

features:
  - name: global_subject
    type: classifier
